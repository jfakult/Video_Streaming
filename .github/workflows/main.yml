name: Build Raspbian Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Add Step
      run: |
          mkdir -p test-stage/package-test &&
          {
          cat > test-stage/package-test/00-build-wiringpi.sh <<-EOF
          #!/bin/bash
          mkdir -p /usr/local/src
          cd /usr/local/src
          git clone https://github.com/WiringPi/WiringPi
          cd WiringPi
          echo "Starting build of WiringPi..."
          ./build
          echo "Build of WiringPi completed."
          EOF
          } &&
          chmod +x test-stage/package-test/00-build-wiringpi.sh &&
          echo "adwaita-icon-theme at-spi2-core autoconf automake ca-certificates cmake dbus-user-session dconf-gsettings-backend dconf-service ffmpeg fontconfig gir1.2-glib-2.0 gir1.2-gst-plugins-base-1.0 gir1.2-gstreamer-1.0 git glib-networking glib-networking-services gsettings-desktop-schemas gstreamer1.0-gl gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-tools gstreamer1.0-x gtk-update-icon-cache hicolor-icon-theme libaa1 libaacs0 libarchive13 libasound2 libass9 libatk-bridge2.0-0 libatk1.0-0 libatomic1 libatspi2.0-0 libavahi-client3 libavahi-common3 libavcodec58 libavdevice58 libavfilter7 libavformat58 libavutil56 libbasicusageenvironment1 libblkid-dev libbluray2 libboost-dev libboost1.74-dev libbs2b0 libbsd0 libc-dev libc6 libc6-dev libcaca0 libcairo-gobject2 libcairo2 libcdio-cdda2 libcdio19 libclone-perl libcolord2 libcups2 libdbus-1-3 libdc1394-25 libdconf1 libdrm-amdgpu1 libdrm-dev libdrm2 libdvdnav4 libdw-dev libegl-dev libegl-mesa0 libegl1 libelf-dev libencode-locale-perl liberror-perl libevdev2 libexpat1 libffi7 libfftw3-double3 libfile-basedir-perl libfile-desktopentry-perl libfile-listing-perl libfile-mimeinfo-perl libfluidsynth2 libfontconfig1 libfreetype6 libgbm1 libgcc-s1 libgcc1 libgcrypt20 libgdk-pixbuf-2.0-0 libgdk-pixbuf2.0-0 libgirepository-1.0-1 libgl-dev libgl1 libgl1-mesa-dri libgles-dev libgles1 libglib2.0-0 libglib2.0-bin libglib2.0-dev libglib2.0-dev-bin libglvnd0 libglx-dev libglx-mesa0 libglx0 libgme0 libgmp-dev libgmp10 libgnutls-dane0 libgnutls28-dev libgnutls30 libgpg-error0 libgssapi-krb5-2 libgstreamer-gl1.0-0 libgstreamer-plugins-bad1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-base1.0-dev libgstreamer1.0-0 libgstreamer1.0-dev libgtk-3-0 libgtk-3-bin libgupnp-1.2-0 libgupnp-igd-1.0-4 libharfbuzz0b libhtml-form-perl libhtml-format-perl libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl libhttp-daemon-perl libhttp-date-perl libhttp-message-perl libice6 libidn2-dev libinput-bin libinput10 libio-socket-ip-perl libio-socket-ssl-perl libjpeg62-turbo libjs-sphinxdoc libjson-glib-1.0-0 libjsoncpp24 libldb2 liblilv-0-0 liblivemedia77 libllvm11 libltdl-dev liblwp-protocol-https-perl liblzma-dev libmailtools-perl libmjpegutils-2.1-0 libmount-dev libmpeg2encpp-2.1-0 libnet-dbus-perl libnet-ssleay-perl libnettle8 libnice10 libofa0 libogg0 libopenal1 libopenexr25 libopenmpt0 libopenni2-0 liborc-0.4-dev libp11-kit-dev libpango-1.0-0 libpangocairo-1.0-0 libpcre2-dev libpcre3-dev libpcrecpp0v5 libplacebo72 libpng16-16 libpocketsphinx3 libproxy1v5 libpulse0 libpython3-dev libpython3.9-dev libqt5concurrent5 libqt5core5a libqt5dbus5 libqt5opengl5 libqt5opengl5-dev libqt5printsupport5 libqt5sql5-sqlite libqt5widgets5 librabbitmq4 libraw1394-11 librest-0.7-0 librsvg2-2 librubberband2 libsamplerate0 libsdl-image1.2 libsdl2-2.0-0 libsecret-1-0 libselinux1-dev libsensors5 libsepol1-dev libserd-0-0 libshout3 libsm6 libsmbclient libsndfile1 libsndio7.0 libsoup2.4-1 libsoxr0 libspandsp2 libspatialaudio0 libsphinxbase3 libsratom-0-0 libsrt1.4-gnutls libsrtp2-1 libssh-gcrypt-4 libssl1.1 libstdc++6 libswresample3 libtag1v5 libtag1v5-vanilla libtasn1-6-dev libthai0 libtheora0 libtool libunbound8 libunwind-dev libupnp13 liburi-perl libusageenvironment3 libva-drm2 libva-x11-2 libva2 libvdpau-va-gl1 libvdpau1 libvidstab1.1 libvlc-bin libvlc5 libvlccore9 libvncclient1 libvorbis0a libvorbisenc2 libvulkan-dev libvulkan1 libwacom2 libwayland-client0 libwayland-dev libwayland-server0 libwww-perl libx11-6 libx11-dev libx11-xcb-dev libxau-dev libxaw7 libxcb-image0 libxcb-render-util0 libxcb-shape0 libxcb1 libxcb1-dev libxcursor1 libxdmcp-dev libxext-dev libxext6 libxfixes3 libxkbcommon-x11-0 libxkbcommon0 libxml-twig-perl libxml2 libxmu6 libxrender1 libxtst6 libzbar0 libzmq5 libzvbi0 m4 mesa-va-drivers mesa-vdpau-drivers mesa-vulkan-drivers meson nettle-dev perl perlapi-5.32.0 pkg-config python3 python3-dev python3-distutils python3-ldb python3-pip python3-setuptools python3-talloc python3-yaml python3.9-dev qt5-qmake qtbase-abi-5-15-2 qtbase5-dev qtbase5-dev-tools samba-libs shared-mime-info uuid-dev x11-common x11-utils x11-xserver-utils x11proto-dev zlib1g" | tr ' ' '\n' > test-stage/package-test/01-packages &&
          {
          cat > test-stage/prerun.sh <<-EOF
          #!/bin/bash -e
         
          EOF
          } &&
          chmod +x test-stage/prerun.sh
      
    - name: Build pi Image
      id: build
      uses: usimd/pi-gen-action@v1
      with:
        # Compression to apply on final image (either "none", "zip", "xz" or "gz").
        compression: zip
    
        # Compression level to be used. From 0 to 9 (refer to the tool man page for more 
        # information on this. Usually 0 is no compression but very fast, up to 9 with the 
        # best compression but very slow).
        compression-level: 6
    
        # Disable the renaming of the first user during the first boot. This make it so 
        # 'username' stays activated. 'username' must be set for this to work. Please be 
        # aware of the implied security risk of defining a default username and password 
        # for your devices.
        disable-first-boot-user-rename: 0
    
        # Additional options to include in PIGEN_DOCKER_OPTS
        docker-opts: ''
    
        # Set whether a NOOBS image should be built as well. If enabled, the output 
        # directory containing the NOOBS files will be saved as output variable 
        # 'image-noobs-path'.
        enable-noobs: false
    
        # Enable SSH access to Pi.
        enable-ssh: 1
    
        # If this feature is enabled, the action will configure pi-gen to not export any 
        # stage as image but the last one defined in property 'stage-list'. This is 
        # helpful when building a single image flavor (in contrast to building a 
        # lite/server and full-blown desktop image), since it speeds up the build process 
        # significantly.
        export-last-stage-only: true
    
        # Comma or whitespace separated list of additional packages to install on host 
        # before running pi-gen. Use this list to add any packages your custom stages may 
        # require. Note that this is not affecting the final image. In order to add 
        # additional packages, you need to add a respective 'XX-packages' file in your 
        # custom stage.
        extra-host-dependencies: ''
    
        # Comma or whitespace separated list of additional modules to load on host before 
        # running pi-gen. If your custom stage requires additional software or kernel 
        # modules to be loaded, add them here. Note that this is not meant to configure 
        # modules to be loaded in the target image.
        extra-host-modules: ''
    
        # Token to use for checking out pi-gen repo.
        github-token: ${{ github.token }}
    
        # Host name of the image.
        hostname: raspberrypi
    
        # Final image name.
        image-name: 'camera-streamer'
    
        # Default keyboard keymap.
        keyboard-keymap: us
    
        # Default keyboard layout.
        keyboard-layout: English (US)
    
        # Default locale of the system image.
        locale: en_US.UTF-8
    
        # Password of the intial user account, locked if empty.
        password: 'raspberry'
    
        # Path where selected pi-gen ref will be checked out to. If the path does not yet 
        # exist, it will be created (including its parents).
        pi-gen-dir: pi-gen
    
        # GitHub repository to fetch pi-gen from, must be a fork from RPi-Distro/pi-gen.
        pi-gen-repository: RPi-Distro/pi-gen
    
        # Release version of pi-gen to use. This can both be a branch or tag name known in 
        # the pi-gen repository.
        pi-gen-version: 2023-05-03-raspios-bullseye
    
        # The release version to build images against. Valid values are jessie, stretch, 
        # buster, bullseye, bookworm, and testing.
        release: bullseye
    
        # Setting to `1` will prevent pi-gen from dropping the "capabilities" feature. 
        # Generating the root filesystem with capabilities enabled and running it from a 
        # filesystem that does not support capabilities (like NFS) can cause issues. Only 
        # enable this if you understand what it is.
        setfcap: ''
    
        # List of stage name to execute in given order. Relative and absolute paths to 
        # custom stage directories are allowed here. Note that by default pi-gen exports 
        # images in stage2 (lite), stage4 and stage5. You probably want to hook in custom 
        # stages before one of the exported stages. Otherwise, the action will make sure 
        # any custom stage will include an image export directive.
        stage-list: stage0 stage1 stage2 ./test-stage
      
        # System timezone.
        timezone: America/Denver
    
        # Use qcow2 images to reduce space and runtime requirements.
        use-qcow2: 1
    
        # Name of the initial user account.
        username: pi
    
        # Print all output from pi-gen.
        verbose-output: true
    
        # Wifi country code of default network to connect to.
        wpa-country: ''
    
        # SSID of a default wifi network to connect to.
        wpa-essid: ''
    
        # Password of default wifi network to connect to.
        wpa-password: ''




    #- uses: actions/upload-artifact@v3
     # with:
      #  name: pi-gen-image
       # path: ${{ steps.build.outputs.image-path }}



    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: development-latest
        release_name: Development Latest
        draft: false
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.image-path }}
        asset_name: image.zip
        asset_content_type: application/zip

